////  ViewController.swift//  VideoRecording  PC////  Created by goWhere on 17/10/30.//  Copyright © 2016年 iwhere. All rights reserved.//import UIKitimport AVFoundationimport Photos@available(iOS 8.0, *)class VideoRecordController: UINavigationController,AVCaptureFileOutputRecordingDelegate{    	var videoRecorderPlugin: VideoRecorderPlugin?    var rootViewController: UIViewController?    var callBackId : String?        //  最长视频录制时间，单位 秒    var MaxVideoRecordTime = 10        //  MARK: - Properties ，    //  视频捕获会话，他是 input 和 output 之间的桥梁，它协调着 input 和 output 之间的数据传输    let captureSession = AVCaptureSession()    //  视频输入设备，前后摄像头    var camera: AVCaptureDevice?    //  展示界面    var previewLayer: AVCaptureVideoPreviewLayer!    //  HeaderView    var headerView: UIView!    var myView: UIView!    //  音频输入设备    let audioDevice = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeAudio)    //  将捕获到的视频输出到文件    let fileOut = AVCaptureMovieFileOutput()        //  开始、停止按钮    var startButton, stopButton: UIButton!    //  前后摄像头转换、闪光灯 按钮    var cameraSideButton, flashLightButton ,redLet: UIButton!    //  录制时间 Label    var totolTimeLabel,tooltip: UILabel!    //  录制时间Timer    var timer: NSTimer?    var secondCount = 10        //  表示当时是否在录像中    var isRecording = false    var isCancle = false        var viewBounds: CGRect!    var longpressGesutre: UILongPressGestureRecognizer!        var url: NSURL!        //  MARK: - LifeCycle    override func viewDidLoad() {        super.viewDidLoad()        //  录制视频基本设置        setupAVFoundationSettings()            //  UI 布局        setupButton()        setupHeaderView()    }        func goBack(url: NSURL){//        self.dismissViewControllerAnimated(true,completion: nil)//        self.rootViewController?.dismissViewControllerAnimated(true,completion: nil)        print("返回成功!",url)    }        override func viewWillAppear(animated: Bool) {     super.viewWillAppear(animated)     navigationController?.navigationBarHidden = true    }        override func viewWillDisappear(animated: Bool) {    super.viewWillDisappear(animated)        navigationController?.navigationBarHidden = false    }        //  MARK: - Private Methods    func setupAVFoundationSettings() {        camera = cameraWithPosition(AVCaptureDevicePosition.Back)                //  设置视频清晰度        captureSession.sessionPreset = AVCaptureSessionPreset640x480                //  添加视频、音频输入设备        if let videoInput = try? AVCaptureDeviceInput(device: self.camera) {            self.captureSession.addInput(videoInput)        }        if let audioInput = try? AVCaptureDeviceInput(device: self.audioDevice) {            self.captureSession.addInput(audioInput)        }                //  添加视频捕获输出        self.captureSession.addOutput(fileOut)            //  使用 AVCaptureVideoPreviewLayer 可以将摄像头拍到的实时画面显示在 ViewController 上        let videoLayer = AVCaptureVideoPreviewLayer(session: self.captureSession)        videoLayer.frame = view.bounds        videoLayer.videoGravity = AVLayerVideoGravityResizeAspectFill        view.layer.addSublayer(videoLayer)        previewLayer = videoLayer            //  启动 Session 回话        self.captureSession.startRunning()    }        func videoOrientationFromCurrentDeviceOrientation() -> AVCaptureVideoOrientation{        let divice = UIDevice.currentDevice().orientation        switch(divice){            case UIDeviceOrientation.LandscapeLeft:                return AVCaptureVideoOrientation.LandscapeRight            case UIDeviceOrientation.LandscapeRight:                return AVCaptureVideoOrientation.LandscapeLeft            default:               return AVCaptureVideoOrientation.Portrait        }        }    //  选择摄像头    func cameraWithPosition(position: AVCaptureDevicePosition) -> AVCaptureDevice? {    let devices = AVCaptureDevice.devicesWithMediaType(AVMediaTypeVideo)    for item in devices as! [AVCaptureDevice] {    if item.position == position {    return item    }    }    return nil    }            //  MARK: - UI Settings    /**    创建按钮    */    func setupButton() {        viewBounds=CGRectMake(0,20,UIScreen.mainScreen().bounds.width,        UIScreen.mainScreen().bounds.height-20)                //  开始按钮        startButton = prepareButtons(btnTitle: "按住拍", btnSize: CGSizeMake(100, 100), btnCenter: CGPointMake((viewBounds.width / 2), viewBounds.height - 40))        startButton.backgroundColor = UIColor.redColor()              longpressGesutre = UILongPressGestureRecognizer(target: self, action: "handleLongpressGesture:")        longpressGesutre.minimumPressDuration=0.2        startButton.addGestureRecognizer(longpressGesutre)        view.addSubview(startButton)            let button = UIButton(frame: CGRectMake(0, 0, 35, 35))        button.center = CGPointMake(50,viewBounds.height - 40)        let backimg = UIImage(named: "back2")?.imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)        button.setImage(backimg, forState: UIControlState.Normal)        button.titleLabel?.font = UIFont.boldSystemFontOfSize(15)        button.setTitleColor(UIColor.whiteColor(), forState: .Normal)        button.addTarget(self, action: Selector("backAction"), forControlEvents: UIControlEvents.TouchUpInside)        view.addSubview(button)    }    //  开始、结束按钮风格统一    func prepareButtons(btnTitle title: String, btnSize size: CGSize, btnCenter center: CGPoint) -> UIButton {        let button = UIButton(frame: CGRectMake(0, 0, size.width, size.height))        button.center = center        button.layer.cornerRadius = size.width/2.0        button.layer.masksToBounds = true        button.setTitle(title, forState: .Normal)        button.titleLabel?.font = UIFont.boldSystemFontOfSize(10)        button.setTitleColor(UIColor.whiteColor(), forState: .Normal)        return button    }        //  headerView    func setupHeaderView() {    tooltip=UILabel(frame: CGRectMake(0,0,70,20))    tooltip.center = CGPoint(x: viewBounds.width/2, y: 40)    tooltip.textColor = UIColor.whiteColor()    tooltip.backgroundColor=UIColor(red: 0, green: 0, blue: 0, alpha: 0.3)    tooltip.textAlignment = .Center    tooltip.font = UIFont.systemFontOfSize(15)    tooltip.text = "上移取消"    tooltip.hidden=true    view.addSubview(tooltip)        redLet = prepareButtons(btnTitle: "", btnSize: CGSizeMake(7,7), btnCenter: CGPointMake(viewBounds.width-65, 40))    redLet.backgroundColor = UIColor.redColor()    view.addSubview(redLet)        totolTimeLabel = UILabel(frame: CGRectMake(0, 0, 100, 20))    totolTimeLabel.center = CGPoint(x: viewBounds.width-40, y: 40)    totolTimeLabel.textColor = UIColor.whiteColor()    totolTimeLabel.textAlignment = .Center    totolTimeLabel.font = UIFont.systemFontOfSize(15)    let mintues = (secondCount % 3600) / 60    let seconds = secondCount % 60    totolTimeLabel.text = String(format: "%02d", mintues) + ":" + String(format: "%02d", seconds)    view.addSubview(totolTimeLabel)        }        //  MARK: - UIButton Actions    //  按钮点击事件    //  点击开始录制视频    func onClickedStartButton() {    tooltip.hidden=false;    //  开启计时器    timer = NSTimer.scheduledTimerWithTimeInterval(1.0, target: self, selector: "videoRecordingTotolTime", userInfo: nil, repeats: true)        if !isRecording {        //  记录状态： 录像中 ...        isRecording = true        isCancle = false        captureSession.startRunning()                //  设置录像保存地址，在 Documents 目录下，名为 当前时间.mp4        let path = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)        let documentDirectory = path[0] as String        let filePath: String? = "\(documentDirectory)/\(String(NSDate())).mp4"        let fileUrl: NSURL? = NSURL(fileURLWithPath: filePath!)        //  启动视频编码输出        let conn = fileOut.connectionWithMediaType(AVMediaTypeVideo)        conn.videoOrientation = videoOrientationFromCurrentDeviceOrientation()        fileOut.startRecordingToOutputFileURL(fileUrl!, recordingDelegate: self)                }    }        //  点击停止按钮，停止了录像    func onClickedEndButton() {    //  关闭计时器    timer?.invalidate()    timer = nil            if isRecording {        fileOut.stopRecording()        //  停止视频编码输出        captureSession.stopRunning()                //  记录状态： 录像结束 ...        isRecording = false    }        if isCancle {            //  启动 Session 回话            self.captureSession.startRunning()        }else{            if MaxVideoRecordTime-secondCount < 3 {                isCancle=true                let alertC = UIAlertController(title: "录制时间太短", message: nil, preferredStyle: .Alert)                alertC.addAction(UIAlertAction(title: "确定", style: .Cancel, handler: nil))                self.presentViewController(alertC, animated: true, completion: nil)                                //  启动 Session 回话                self.captureSession.startRunning()            }        }     }        //  录制时间    func videoRecordingTotolTime() {        secondCount -= 1                //  判断是否录制超时        if secondCount == 0 {            onClickedEndButton()            tooltip.hidden=true;            secondCount = MaxVideoRecordTime            let mintues = (secondCount % 3600) / 60            let seconds = secondCount % 60            totolTimeLabel.text = String(format: "%02d", mintues) + ":" + String(format: "%02d", seconds)        }else{            let mintues = (secondCount % 3600) / 60            let seconds = secondCount % 60                        totolTimeLabel.text = String(format: "%02d", mintues) + ":" + String(format: "%02d", seconds)        }    }        //  是否隐藏 HeaderView    func hiddenHeaderView(isHidden: Bool) {    if isHidden {    UIView.animateWithDuration(0.2, animations: {    self.headerView.frame.origin.y -= 64    })    } else {    UIView.animateWithDuration(0.2, animations: {    self.headerView.frame.origin.y += 64    })    }    }        //  返回上一页    func backAction() {        self.dismissViewControllerAnimated(true, completion: nil)    }            //  调整摄像头    func changeCamera(cameraSideButton: UIButton) {    cameraSideButton.selected = !cameraSideButton.selected    captureSession.stopRunning()    //  首先移除所有的 input    if let  allInputs = captureSession.inputs as? [AVCaptureDeviceInput] {    for input in allInputs {    captureSession.removeInput(input)        }    }        changeCameraAnimate()        //  添加音频输出    if let audioInput = try? AVCaptureDeviceInput(device: self.audioDevice) {    self.captureSession.addInput(audioInput)    }        if cameraSideButton.selected {    camera = cameraWithPosition(.Front)    if let input = try? AVCaptureDeviceInput(device: camera!) {    captureSession.addInput(input)    }        if flashLightButton.selected {    flashLightButton.selected = false    }        } else {        camera = cameraWithPosition(.Back)        if let input = try? AVCaptureDeviceInput(device: camera!) {            captureSession.addInput(input)        }    }    }        //长按按钮处理    func handleLongpressGesture(action: UIPanGestureRecognizer){        var point: CGPoint        if action.state == UIGestureRecognizerState.Ended {            point = action.locationInView(view)            if (startButton.center.y-point.y) > 60 {                isCancle=true            }            onClickedEndButton()            tooltip.hidden=true;            secondCount = MaxVideoRecordTime            let mintues = (secondCount % 3600) / 60            let seconds = secondCount % 60            totolTimeLabel.text = String(format: "%02d", mintues) + ":" + String(format: "%02d", seconds)        } else if action.state == UIGestureRecognizerState.Began{            onClickedStartButton()        }else if action.state == UIGestureRecognizerState.Changed{            point = action.locationInView(view)            if (startButton.center.y-point.y) > 60 {                tooltip.text="松开取消"            }else{                tooltip.text="上划取消"            }        }    }        //  切换动画    func changeCameraAnimate() {    let changeAnimate = CATransition()    changeAnimate.delegate = self    changeAnimate.duration = 0.4    changeAnimate.type = "oglFlip"    changeAnimate.subtype = kCATransitionFromRight        previewLayer.addAnimation(changeAnimate, forKey: "changeAnimate")    }        override func animationDidStart(anim: CAAnimation) {        captureSession.startRunning()    }    //    //  开启闪光灯//    func switchFlashLight(flashButton: UIButton) {//    if self.camera?.position == AVCaptureDevicePosition.Front {//    return//    }//    let camera = cameraWithPosition(.Back)//    if camera?.torchMode == AVCaptureTorchMode.Off {//    do {//    try camera?.lockForConfiguration()//    } catch let error as NSError {//    print("开启闪光灯失败 ： \(error)")//    }//    //    camera?.torchMode = AVCaptureTorchMode.On//    camera?.flashMode = AVCaptureFlashMode.On//    camera?.unlockForConfiguration()//    //    flashButton.selected = true//    } else {//    do {//    try camera?.lockForConfiguration()//    } catch let error as NSError {//    print("关闭闪光灯失败： \(error)")//    }//    //    camera?.torchMode = AVCaptureTorchMode.Off//    camera?.flashMode = AVCaptureFlashMode.Off//    camera?.unlockForConfiguration()//    //    flashButton.selected = false//    }//    }        //  MARK: - 录像代理方法    func captureOutput(captureOutput: AVCaptureFileOutput!, didStartRecordingToOutputFileAtURL fileURL: NSURL!, fromConnections connections: [AnyObject]!) {    //  开始    }    func captureOutput(captureOutput: AVCaptureFileOutput!, didFinishRecordingToOutputFileAtURL outputFileURL: NSURL!, fromConnections connections: [AnyObject]!, error: NSError!) {        //  结束        if !isCancle {            //presentViewController            let PreviewVideoVC = PreviewVideoController()            PreviewVideoVC.getUrl(outputFileURL)            PreviewVideoVC.videoRecorderPlugin = videoRecorderPlugin            PreviewVideoVC.callBackId = callBackId            //PreviewVideoVC.delegte = self            PreviewVideoVC.videoRecordController = self            PreviewVideoVC.rootViewController = self.rootViewController            let nav = UINavigationController(rootViewController: PreviewVideoVC)            self.presentViewController(nav, animated: true, completion: nil)            //print(self.navigationController)            //self.navigationController?.pushViewController(PreviewVideoVC, animated: true)            self.captureSession.startRunning()        }    }        override func didReceiveMemoryWarning() {    super.didReceiveMemoryWarning()    // Dispose of any resources that can be recreated.    }        override func shouldAutorotate() -> Bool {        return false    }        override func supportedInterfaceOrientations() -> UIInterfaceOrientationMask {        return UIInterfaceOrientationMask.Portrait    }        override func preferredInterfaceOrientationForPresentation() -> UIInterfaceOrientation{        return UIInterfaceOrientation.Portrait    }}